(ns frontend.modules.outliner.transaction
  #?(:cljs (:require-macros [frontend.modules.outliner.transaction]))
  #?(:cljs (:require [datascript.core :as d])))

(defonce listeners (atom []))

(defmacro transact!
  "Batch all the transactions in `body` to a single transaction, Support nested transact! calls.
  Currently there are no options, it'll execute body and collect all transaction data generated by body, then calls `listeners` on the `tx-report`.
  (transact! conn {<option-map>}
    (insert-nodes ...)
    ;; do something
    (move-nodes ...)
    (delete-nodes ...))"
  [conn opts & body]
  (assert (map? opts))
  `(if (some? frontend.modules.outliner.core/*transaction-data*)
     (do ~@body)
     (binding [frontend.modules.outliner.core/*transaction-data* (transient [])]
       ~@body
       (let [~'r (persistent! frontend.modules.outliner.core/*transaction-data*)]
         (when (seq ~'r)
           ;; For debugging
           (prn "Transact data: " ~'r)
           (let [~'tx-report (d/transact! ~conn ~'r)]
             (doseq [~'listener @listeners]
               (~'listener ~'tx-report))
             ~'tx-report))))))
